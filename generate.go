package ezactions

import (
	"io"
	"runtime"
	"strings"
	"text/template"

	"gopkg.in/yaml.v2"
)

func writeActionYML(w io.Writer, action *Action) error {
	type ymlInput struct {
		Required    bool
		Description string
		Default     string `yaml:",omitempty"`
	}
	type ymlOutput struct {
		Description string
	}
	type ymlAction struct {
		Name        string
		Description string
		Author      string               `yaml:",omitempty"`
		Inputs      map[string]ymlInput  `yaml:",omitempty"`
		Outputs     map[string]ymlOutput `yaml:",omitempty"`
		Runs        map[string]string
	}

	ymlVals := &ymlAction{
		Name:        action.Name,
		Description: action.Description,
		Author:      action.Author,
		Runs: map[string]string{
			"using": "docker",
			"image": "Dockerfile",
		},
	}

	if len(action.Inputs) > 0 {
		ymlVals.Inputs = make(map[string]ymlInput, len(action.Inputs))
		for _, input := range action.Inputs {
			ymlVals.Inputs[input.ID] = ymlInput{
				Required:    input.Required,
				Description: input.Description,
				Default:     input.Default,
			}
		}
	}

	if len(action.Outputs) > 0 {
		ymlVals.Outputs = make(map[string]ymlOutput, len(action.Outputs))
		for _, output := range action.Outputs {
			ymlVals.Outputs[output.ID] = ymlOutput{
				Description: output.Description,
			}
		}
	}
	data, err := yaml.Marshal(ymlVals)
	if err != nil {
		return err
	}
	header := []byte("# Code generated by ezactions. DO NOT EDIT.\n\n")
	_, err = w.Write(append(header, data...))
	return err
}

type dockerfileTemplateData struct {
	GoVersion string
	MainPath  string
}

func writeDockerFile(w io.Writer, options *dockerfileTemplateData) error {
	if options == nil {
		options = new(dockerfileTemplateData)
	}
	tmpl, err := template.New("").Parse(defaultTemplate)
	if err != nil {
		return err
	}
	if options.MainPath == "" {
		options.MainPath = "."
	}
	if options.GoVersion == "" {
		options.GoVersion = runtime.Version()
		options.GoVersion = strings.TrimPrefix(options.GoVersion, "go")
	}
	return tmpl.Execute(w, options)
}

var defaultTemplate = `# Code generated by ezactions. DO NOT EDIT.

FROM golang:{{.GoVersion}}-alpine AS builder
RUN apk --no-cache add ca-certificates
WORKDIR	/builddir
COPY . .
RUN go build -o entrypoint {{.MainPath}} && mv entrypoint /entrypoint

FROM alpine:3.11
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/
COPY --from=builder /entrypoint /entrypoint

ENTRYPOINT ["/entrypoint"]
`
